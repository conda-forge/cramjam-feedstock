{% set name = "cramjam" %}
{% set version = "2.8.4" %}
{% set py_ver_split = PY_VER.split(".") %}
{% set major_minor = py_ver_split[ 0 ] + py_ver_split[ 1 ] %}

{% set target = "linux" %}      # [linux]
{% set target = "win" %}        # [win]
{% set target = "osx" %}        # [osx]

{% set arch = "ppc64le" %}      # [ppc64le]
{% set arch = "arm64" %}        # [arm64]
{% set arch = "x86_64" %}       # [x86_64]
{% set arch = "s390x" %}        # [s390x]
{% set arch = "win32" %}        # [win32]
{% set arch = "amd64" %}        # [win64]
{% set arch = "aarch64" %}      # [aarch64]
{% set arch = "i686" %}         # [i686]
{% set arch = "armv7l" %}       # [armv7l]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: ad8bec85b46283330214f4367805e6f56e04ce25a030a2c6a4b127437d006fcf

build:
  number: 0
  script: |
    curl -O https://pypi.org/pypi/cramjam/json
    url=$(cat json | jq -r '.releases."{{ version }}" | .[] | select(.python_version == "cp{{ major_minor }}") | select(.filename | contains("{{ target }}") and contains("{{ arch }}") ) | select(.filename | contains("musllinux") | not) | .url')
    fln=$(cat json | jq -r '.releases."{{ version }}" | .[] | select(.python_version == "cp{{ major_minor }}") | select(.filename | contains("{{ target }}") and contains("{{ arch }}") ) | select(.filename | contains("musllinux") | not) | .filename')
    echo "Fetching wheel at $url"
    curl -o "$fln" "$url"        
    echo "Installing wheel"
    {{ PYTHON }} -m pip install --pre --no-deps --no-index cramjam --find-links . -vv

requirements:
  build:
    - python
    - pip
    - curl
  host:
    - python
    - pip
  run:
    - python

test:
  imports:
    - cramjam

about:
  home: https://github.com/milesgranger/pyrus-cramjam
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: python bindings to rust-implemented compression
  # The remaining entries in this section are optional, but recommended.
  description: |
    Extremely thin Python bindings to de/compression algorithms in Rust. 
    Allows for using algorithms such as Snappy, without any system dependencies.
    This is handy when being used in environments like AWS Lambda, 
    where installing packages like python-snappy becomes difficult because of 
    system level dependencies.
  doc_url: https://docs.rs/cramjam

extra:
  recipe-maintainers:
    - martindurant
    - milesgranger
